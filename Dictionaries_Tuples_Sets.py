# Словари, кортежи и множества

def ex613():
    '''
    Вводятся данные в формате ключ=значение в одну строчку через пробел.
    Значениями здесь являются целые числа (см. пример ниже).
    Необходимо на их основе создать словарь d с помощью функции dict() и вывести его на экран командой:
    print(*sorted(d.items()))
    Sample Input:
    one=1 two=2 three=3
    Sample Output:
    ('one', 1) ('three', 3) ('two', 2)


    :return:
    '''
    lst = ['one=1', 'two=2', 'three=3']
    lst = [j.split("=") for j in lst]
    lst = [[int(j[i]) if j[i].isdigit() else j[i] for i in range(len(lst[0]))] for j in lst]
    lst = dict(lst)
    print(*sorted(lst.items()))
    return 0
# ex613()

def ex614():
    '''
    На вход программы поступают данные в виде набора строк в формате:
    ключ1=значение1
    ключ2=значение2
    ...
    ключN=значениеN
    Ключами здесь выступают целые числа (см. пример ниже).
    Необходимо их преобразовать в словарь d (без использования функции dict()) и вывести его на экран командой:
    print(*sorted(d.items()))
    P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
    Sample Input:
    5=отлично
    4=хорошо
    3=удовлетворительно
    Sample Output:
    (3, 'удовлетворительно') (4, 'хорошо') (5, 'отлично')
    '''
    lst_in = ['5=отлично', '4=хорошо', '3=удовлетворительно']
    #lst_in = [[j.split('=') for j in i] for i in lst_in]
    lst_in = [j.split('=') for j in lst_in]
    d = dict([[int(i[j]) if i[j].isdigit() else i[j] for j in range(len(lst_in[0]))]for i in lst_in])
    print(*sorted(d.items()))
    return 0
#ex614()

def ex615():
    '''
    Вводятся данные в формате ключ=значение в одну строчку через пробел.
    Необходимо на их основе создать словарь, затем проверить,
    существуют ли в нем ключи со значениями: 'house', 'True' и '5' (все ключи - строки).
    Если все они существуют, то вывести на экран ДА, иначе - НЕТ.
    Sample Input:
    вологда=город house=дом True=1 5=отлично 9=божественно
    Sample Output:
    ДА
    '''
    lst = list(input().split())
    lst = [j.split('=') for j in lst]
    d = dict(lst)
    #print(lst)
    if 'house' in d and 'True' in d and '5' in d:
        print("ДА")
    else:
        print("НЕТ")
    return 0
#ex615()

def ex616():
    '''
    Вводятся данные в формате ключ=значение в одну строчку через пробел.
    Необходимо на их основе создать словарь d, затем удалить из этого словаря ключи 'False' и '3',
    если они существуют. Ключами и значениями словаря являются строки.
    Вывести полученный словарь на экран командой:
    print(*sorted(d.items()))
    Sample Input:
    лена=имя дон=река москва=город False=ложь 3=удовлетворительно True=истина
    Sample Output:
    ('True', 'истина') ('дон', 'река') ('лена', 'имя') ('москва', 'город')
    '''
    lst = list(input().split())
    #lst = dict([i.split("=") for i in input().split()])
    lst = [j.split('=') for j in lst]
    ld = ['False', '3']
    d = dict(lst)
    for i in ld:
        if i in d:
            del d[i]
    print(*sorted(d.items()))
    return 0
#ex616()

def ex617():
    '''
    Вводятся номера телефонов в одну строчку через пробел с разными кодами стран: +7, +6, +2, +4 и т.д.
    Необходимо составить словарь d, где ключи - это коды +7, +6, +2 и т.п.,
    а значения - список номеров (следующих в том же порядке, что и во входной строке) с соответствующими кодами.
    Полученный словарь вывести командой:
    print(*sorted(d.items()))
    Sample Input:
    +71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
    Sample Output:
    ('+2', ['+21235777890', '+21234567110']) ('+5', ['+52134567890']) ('+6', ['+61234576890']) ('+7', ['+71234567890', '+71234567854', '+71232267890'])
    '''
    nums = ['+71234567890', '+71234567854', '+61234576890', '+52134567890', '+21235777890', '+21234567110', '+71232267890']
    kods = [i[:2] for i in nums]
    d = []
    for i in kods:
        if kods.count(i) > 1:
            kods.remove(i)
    for j in range(len(kods)):
        d += [[kods[j], [nums[i] for i in range(len(nums)) if kods[j] in nums[i]]]]
    d = dict(d)
    print(*sorted(d.items()))
    print(d)
    return 0
#ex617()

def ex618():
    '''
    Вводятся номера телефонов в формате:
    номер_1 имя_1
    номер_2 имя_2
    ...
    номер_N имя_N
    Необходимо создать словарь d, где ключами будут имена, а значениями - список номеров телефонов для этого имени.
    Обратите внимание, что одному имени может принадлежать несколько разных номеров. Полученный словарь вывести командой:
    print(*sorted(d.items()))
    Sample Input:
    +71234567890 Сергей
    +71234567810 Сергей
    +51234567890 Михаил
    +72134567890 Николай
    Sample Output:
    ('Михаил', ['+51234567890']) ('Николай', ['+72134567890']) ('Сергей', ['+71234567890', '+71234567810'])
    '''
    lst = ['+71234567890 Сергей', '+71234567810 Сергей', '+51234567890 Михаил', '+72134567890 Николай']
    lst = [x.split() for x in lst]
    a = []
    [lst[i].reverse() for i in range(len(lst))]
    for i in range(len(lst) - 1):
        for j in range(len(lst[i])):
            if lst[i][j] == lst[i + 1][j]:
                lst[i].append(lst[i + 1][1])
    for i in range(len(lst) - 1):
        if lst[i][0] == lst[i + 1][0]:
            a.append(i + 1)

    for i in range(len(lst)):
        #if len(lst[i]) > 2:
        lst[i] = [lst[i][0], [lst[i][k] for k in range(1, len(lst[i]))]]
        #elif len(lst[i]) < 2:
    for x in a:
        print(a)
        lst.pop(x)


    #lst[0] = lst[0] + lst[1]
    #print(lst.count(lst[1]))
    d = dict(lst)
    print(lst)
    return 0
#НЕ ВЕРНОЕ РЕШЕНИЕ
#ex618()

def ex613_2():
    ''' Вводятся данные в формате ключ=значение в одну строчку через пробел.
    Значениями здесь являются целые числа (см. пример ниже).
    Необходимо на их основе создать словарь d с помощью функции dict() и вывести его на экран командой:

print(*sorted(d.items()))

Sample Input:
one=1 two=2 three=3

Sample Output:
('one', 1) ('three', 3) ('two', 2)
'''
    i = input().split()
    i = [j.split("=") for j in i]
    i = [[int(j[k]) if j[k].isdigit() else j[k]
          for k in range(len(j))]
         for j in i]
    d = dict(i)
    print(*sorted(d.items()))

    # for j in i:
    #     print(f'j = {j}')
    #     for k in range(len(j)):
    #         print(f'k = {k}')

def ex614_2():
    '''
    На вход программы поступают данные в виде набора строк в формате: 
ключ1=значение1
ключ2=значение2
...
ключN=значениеN
Ключами здесь выступают целые числа (см. пример ниже).
Необходимо их преобразовать в словарь d (без использования функции dict()) и вывести его на экран командой:

print(*sorted(d.items()))

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:
5=отлично
4=хорошо
3=удовлетворительно

Sample Output:
(3, 'удовлетворительно') (4, 'хорошо') (5, 'отлично')
    '''

    # считывание списка из входного потока
    #lst_in = list(map(str.strip, sys.stdin.readlines()))
    lst_in = ['5=отлично', '4=хорошо', '3=удовлетворительно']
    d = {}
    # здесь продолжайте программу (используйте список lst_in)
    lst_in = [j.split("=") for j in lst_in]
    lst_in = [[int(j[k]) if j[k].isdigit() else j[k]
          for k in range(len(j))]
         for j in lst_in]

    for i in range(len(lst_in)):
        d[lst_in[i][0]] = lst_in[i][1]

    #     d = {lst_in[i][0]:lst_in[i][1] for i in range(len(lst_in))}
    d[10] = 100500
    print(d)

def ex615_2():
    '''Вводятся данные в формате ключ=значение в одну строчку через пробел.
    Необходимо на их основе создать словарь d, затем удалить из этого словаря ключи 'False' и'3', если они существуют.
    Ключами и значениями словаря являются строки. Вывести полученный словарь на экран командой:
print(*sorted(d.items()))

Sample Input:
лена=имя дон=река москва=город False=ложь 3=удовлетворительно True=истина
Sample Output:
('True', 'истина') ('дон', 'река') ('лена', 'имя') ('москва', 'город')
'''
    lst_in = input().split()
    lst_in = [lst_in[i].split('=') for i in range(len(lst_in))]
    d = dict(lst_in)

    if "False" and "3" in d:
        del d['False']
        del d['3']

    print(*sorted(d.items()))

def ex616_2():
    '''Вводятся номера телефонов в одну строчку через пробел с разными кодами стран: +7, +6, +2, +4 и т.д.
    Необходимо составить словарь d, где ключи - это коды +7, +6, +2 и т.п.,
    а значения - список номеров (следующих в том же порядке, что и во входной строке) с соответствующими кодами.
    Полученный словарь вывести командой:
print(*sorted(d.items()))

Sample Input:
+71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
Sample Output:
('+2', ['+21235777890', '+21234567110']) ('+5', ['+52134567890']) ('+6', ['+61234576890']) ('+7', ['+71234567890', '+71234567854', '+71232267890'])
'''
    nums = input().split()
    d = dict([(x[:2], [i for i in nums if x[:2] == i[:2]]) for x in nums])
    print(*sorted(d.items()))

def ex617_2():
    ''' Вводятся номера телефонов в формате:
номер_1 имя_1
номер_2 имя_2
...
номер_N имя_N
Необходимо создать словарь d, где ключами будут имена, а значениями - список номеров телефонов для этого имени.
Обратите внимание, что одному имени может принадлежать несколько разных номеров.
Полученный словарь вывести командой:
print(*sorted(d.items()))
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:
+71234567890 Сергей
+71234567810 Сергей
+51234567890 Михаил
+72134567890 Николай

Sample Output:
('Михаил', ['+51234567890']) ('Николай', ['+72134567890']) ('Сергей', ['+71234567890', '+71234567810'])
'''

    lst_in = ['+71234567890 Сергей', '+71234567810 Сергей', '+51234567890 Михаил', '+72134567890 Николай']
    lst_in = [lst_in[i].split() for i in range(len(lst_in))]
    d = dict([lst_in[i][1], [lst_in[j][0] for j in range(len(lst_in)) if lst_in[i][1] == lst_in[j][1]]] for i in range(len(lst_in)))
    print(*sorted(d.items()))

def ex619():
    '''Пользователь вводит в цикле целые положительные числа, пока не введет число 0.
    Для каждого числа вычисляется квадратный корень (с точностью до сотых) и значение выводится на экран (в столбик).
    С помощью словаря выполните кэширование данных так,
    чтобы при повторном вводе того же самого числа результат не вычислялся,
    а бралось ранее вычисленное значение из словаря. При этом на экране должно выводиться:
значение из кэша: <число>

Sample Input:
1
2
3
3
2
4
0

Sample Output:
1.0
1.41
1.73
значение из кэша: 1.73
значение из кэша: 1.41
2.0
'''
    num = -1
    d = {}
    while num != 0:
        num = int(input())
        if num not in d:
            d[num] = round(num ** (0.5), 3)
            print(d[num])
        elif num == 0:
            pass
        else:
            print(f'значение из кэша: {d[num]}')

def ex6110():
    '''Тестовый веб-сервер возвращает HTML-страницы по URL-адресам (строкам).
    На вход программы поступают различные URL-адреса. Если адрес пришел впервые,
    то на экране отобразить строку (без кавычек):
"HTML-страница для адреса <URL-адрес>"
Если адрес приходит повторно, то следует взять строку "HTML-страница для адреса <URL-адрес>" из словаря и
вывести на экран сообщение (без кавычек):
"Взято из кэша: HTML-страница для адреса <URL-адрес>"
Сообщения выводить каждое с новой строки.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:
ustanovka-i-zapusk-yazyka
ustanovka-i-poryadok-raboty-pycharm
peremennyye-operator-prisvaivaniya-tipy-dannykh
arifmeticheskiye-operatsii
ustanovka-i-poryadok-raboty-pycharm

Sample Output:
HTML-страница для адреса ustanovka-i-zapusk-yazyka
HTML-страница для адреса ustanovka-i-poryadok-raboty-pycharm
HTML-страница для адреса peremennyye-operator-prisvaivaniya-tipy-dannykh
HTML-страница для адреса arifmeticheskiye-operatsii
Взято из кэша: HTML-страница для адреса ustanovka-i-poryadok-raboty-pycharm
'''

    lst_in = ['ustanovka-i-zapusk-yazyka', 'ustanovka-i-poryadok-raboty-pycharm',
              'peremennyye-operator-prisvaivaniya-tipy-dannykh', 'arifmeticheskiye-operatsii',
              'ustanovka-i-poryadok-raboty-pycharm']
    #lst_in = [[j] for i, j in enumerate(lst_in)]
    d = dict()
    #print(lst_in)
    for j, i in enumerate(lst_in):
        if i in d:
            print(f'Взято из кэша: HTML-страница для адреса {i}')
        else:
            print(f'HTML-страница для адреса {i}')
        d[i] = j

def ex623():
    '''
    Вводится строка из русских букв и символов пробела.
    Необходимо ее закодировать азбукой Морзе, где каждой букве ставится в соответствие код из точки и тире.
    После каждой закодированной буквы должен стоять пробел (символ окончания кода буквы).
    После последнего кода пробела быть не должно (в конце строки).
    '''

    morzaynka = {"А": ".-", "Б": "-...", "В": ".--", "Г": "--.", "Д": "-..", "Е": ".", "Ё": ".", "Ж": "...-", "З": "--..",
                 "И": "..", "Й": ".---", "К": "-.-", "Л": ".-..", "М": "--", "Н": "-.", "О": "---", "П": ".--.",
                 "Р": ".-.", "С": "...", "Т": "-", "У": "..-", "Ф": "..-.", "Х": "....", "Ц": "-.-.", "Ч": "---.",
                 "Ш": "----", "Щ": "--.-", "Ъ": "--.--", "Ы": "-.--", "ь": "-..-", "Э": "..-..", "Ю": "..--", "Я": ".-.-",
                 " ": "-...-"}
    enter = input("Input Russian words: ").upper()
    output = ''
    for x in enter[:-1]:
        output += morzaynka[x] + ' '

    output += morzaynka[enter[-1]]

    print(output)

def ex624():
    """
Имеется закодированная строка с помощью азбуки Морзе. Коды разделены между собой пробелом.
Необходимо ее раскодировать, используя азбуку Морзе из предыдущего занятия.
Полученное сообщение (строку) вывести на экран.
Sample Input:
.-- ... . -...- .-- . .-. -. ---
Sample Output:
все верно
"""
    morzaynka = {"А": ".-", "Б": "-...", "В": ".--", "Г": "--.", "Д": "-..", "Е": ".", "Ё": ".", "Ж": "...-", "З": "--..",
                 "И": "..", "Й": ".---", "К": "-.-", "Л": ".-..", "М": "--", "Н": "-.", "О": "---", "П": ".--.",
                 "Р": ".-.", "С": "...", "Т": "-", "У": "..-", "Ф": "..-.", "Х": "....", "Ц": "-.-.", "Ч": "---.",
                 "Ш": "----", "Щ": "--.-", "Ъ": "--.--", "Ы": "-.--", "ь": "-..-", "Э": "..-..", "Ю": "..--", "Я": ".-.-",
                 " ": "-...-"}
    input = ".-- ... . -...- .-- . .-. -. ---".split(' ')

    morzaynka_revers = {value: key for key, value in morzaynka.items()}

    output = "".join([morzaynka_revers.get(i) for i in input]).lower()
    print(output)

def ex625():
    '''
Вводится список целых чисел в одну строчку через пробел.
С помощью словаря выделите только уникальные (не повторяющиеся) введенные значения и, затем,
сформируйте список из уникальных чисел.
Выведите его на экран в виде набора чисел, записанных через пробел.
P. S. Такая задача, обычно решается через множества, но мы их еще не проходили, поэтому воспользуемся словарем.
Sample Input:
8 11 -4 5 2 11 4 8
Sample Output:
8 11 -4 5 2 4
    '''

    nums = [8, 11, -4, 5, 2, 11, 4, 8]
    d = {i: 'num' for i in nums}

    print(*d.keys())

def ex626():
    '''Вводятся данные в формате:
<день рождения 1> имя_1
<день рождения 2> имя_2
...
<день рождения N> имя_N
Дни рождений и имена могут повторяться. На их основе сформировать словарь и вывести его в формате (см. пример ниже):
день рождения 1: имя1, ..., имяN1
день рождения 2: имя1, ..., имяN2
...
день рождения M: имя1, ..., имяNM
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.

Sample Input:
3 Сергей
5 Николай
4 Елена
7 Владимир
5 Юлия
4 Светлана

Sample Output:
3: Сергей
5: Николай, Юлия
4: Елена, Светлана
7: Владимир
'''

    lst_in = ['3 Сергей', '5 Николай', '4 Елена', '7 Владимир', '5 Юлия', '4 Светлана']
    lst_in = [i.split(' ') for i in lst_in]
    d = {}
    for key, value in lst_in:
        if key not in d:
            d.setdefault(key, value)
        else:
            d[key] = d.get(key) + ', ' + value
    for i in d:
        print(i + ': ' + d.get(i))

def ex627():
    ''' Имеется словарь с наименованиями предметов и их весом (в граммах):

things = {'карандаш': 20, 'зеркальце': 100, 'зонт': 500, 'рубашка': 300,
          'брюки': 1000, 'бумага': 200, 'молоток': 600, 'пила': 400, 'удочка': 1200,
          'расческа': 40, 'котелок': 820, 'палатка': 5240, 'брезент': 2130, 'спички': 10}

Сергей собирается в поход и готов взвалить на свои хрупкие плечи максимальный вес в N кг (вводится с клавиатуры).
Он решил класть в рюкзак предметы в порядке убывания их веса (сначала самые тяжелые, затем, все более легкие) так,
чтобы их суммарный вес не превысил значения N кг.
Все предметы даны в единственном экземпляре. Выведите список предметов (в строчку через пробел),
которые берет с собой Сергей в порядке убывания их веса.

P. S. 1 кг = 1000 грамм
Sample Input:
10
Sample Output:
палатка брезент удочка брюки пила карандаш спички
    '''
    things = {'карандаш': 20, 'зеркальце': 100, 'зонт': 500, 'рубашка': 300,
              'брюки': 1000, 'бумага': 200, 'молоток': 600, 'пила': 400, 'удочка': 1200,
              'расческа': 40, 'котелок': 820, 'палатка': 5240, 'брезент': 2130, 'спички': 10}
    things_revers = {value: key for key, value in things.items()}
    w = int(input()) * 1000

    print(sorted(things_revers.items(), reverse=True))
    for key, value in sorted(things_revers.items(), reverse=True):
        if key <= w:
            w -= key
            print(value, end=' ')
        else:
            continue

def ex633():
    ''' Имеется кортеж:
t = (3.4, -56.7)
Вводится последовательность целых чисел в одну строчку через пробел.
Необходимо их добавить в кортеж t. Результат вывести на экран командой:
print(t)

Sample Input:
8 11 -5 2
Sample Output:
(3.4, -56.7, 8, 11, -5, 2)
'''

    t = (3.4, -56.7)
    t_in = tuple(map(int, input().split()))
    t += t_in
    print(t)

def ex634():
    ''' Вводятся названия городов в одну строку через пробел. На их основе формируется кортеж.
    Если в этом кортеже нет города "Москва", то следует его добавить в конец кортежа.
    Результат вывести на экран в виде строки с названиями городов через пробел.

Sample Input:
Уфа Казань Самара
Sample Output:
Уфа Казань Самара Москва
'''
    cities = tuple(input().split())
    if "Москва" not in cities:
        cities += ("Москва",)
    print(cities)

def ex635():
    """Вводятся названия городов в одну строку через пробел.
    На их основе формируется кортеж. Если в этом кортеже присутствует город "Ульяновск",
    то этот элемент следует удалить (создав новый кортеж).
    Результат вывести на экран в виде строки с названиями городов через пробел.
Sample Input:
Воронеж Самара Тольятти Ульяновск Пермь
Sample Output:
Воронеж Самара Тольятти Пермь
"""
    cities = tuple(input().split())
    c = cities[:cities.index("Ульяновск")] + cities[cities.index("Ульяновск") + 1:] if "Ульяновск" in cities else cities
    print(*c)

def ex636():
    '''Вводятся имена студентов в одну строчку через пробел. На их основе формируется кортеж.
    Отобразите на экране все имена из этого кортежа, которые содержат фрагмент "ва" (без учета регистра).
    Имена выводятся в одну строчку через пробел в нижнем регистре (малыми буквами).
Sample Input:
Петя Варвара Венера Василиса Василий Федор
Sample Output:
варвара василиса василий
'''
    names = tuple(input().lower().split())
    a = (names[i] for i in range(len(names)) if 'ва' in names[i])
    print(*a)

def ex637():
    '''
Вводятся целые числа в одну строку через пробел.
На их основе формируется кортеж.
Необходимо создать еще один кортеж с уникальными (не повторяющимися) значениями из первого кортежа.
Результат отобразите в виде списка чисел через пробел.
P. S. Подобные задачи решаются, как правило, с помощью множеств, но в качестве практики пока обойдемся без них.
Sample Input:
8 11 -5 -2 8 11 -5
Sample Output:
8 11 -5 -2
    '''
    nums = tuple(map(int, input().split()))
    a = (j for i, j in enumerate(nums) if nums.count(j) <= nums[i:].count(j))
    print(*a)

def ex638():
    '''
    Вводятся целые числа в одну строку через пробел. На их основе формируется кортеж.
    Необходимо найти и вывести все индексы неуникальных (повторяющихся) значений в этом кортеже.
    Результат отобразите в виде строки чисел, записанных через пробел.
Sample Input:
5 4 -3 2 4 5 10 11
Sample Output:
0 1 4 5
    '''
    nums = tuple(map(int, input().split()))
    print(*(i for i in range(len(nums)) if nums.count(nums[i]) > 1))

def ex639():
    '''
     Имеется двумерный кортеж, размером 5 x 5 элементов:
t = ((1, 0, 0, 0, 0),
     (0, 1, 0, 0, 0),
     (0, 0, 1, 0, 0),
     (0, 0, 0, 1, 0),
     (0, 0, 0, 0, 1))
Вводится натуральное число N (N < 5).
Необходимо на основе кортежа t сформировать новый аналогичный кортеж t2 размером N x N элементов.
Результат вывести на экран в виде таблицы чисел.
Sample Input:
3
Sample Output:
1 0 0
0 1 0
0 0 1
    '''
    t = ((1, 0, 0, 0, 0),
         (0, 1, 0, 0, 0),
         (0, 0, 1, 0, 0),
         (0, 0, 0, 1, 0),
         (0, 0, 0, 0, 1))
    i = int(input())
    t2 = tuple(tuple(t[k][j] for j in range(i)) for k in range(i))
    [print(*t2[v]) for v in range(i)]

def ex6310():
    '''
    Вводятся пункты меню (каждый пункт с новой строки) в формате:
название_1 URL-адрес_1
название_2 URL-адрес_2
...
название_N URL-адрес_N

Необходимо эту информацию представить в виде вложенного кортежа menu в формате:
((название_1, URL-адрес_1), (название_2, URL-адрес_2), ... (название_N, URL-адрес_N))
Результат вывести на экран в виде кортежа командой:
print(menu)

P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
Главная home
Python learn-python
Java learn-java
PHP learn-php
Sample Output:
(('Главная', 'home'), ('Python', 'learn-python'), ('Java', 'learn-java'), ('PHP', 'learn-php'))
    '''

    lst_in = ['Главная home', 'Python learn-python', 'Java learn-java', 'PHP learn-php']
    menu = tuple([tuple(lst_in[i].split()) for i in range(len(lst_in))])
    print(menu)

def ex643():
    '''Вводятся вещественные числа в одну строчку через пробел. Необходимо на их основе сформировать множество s.
Подсказка: множество можно создать по аналогии со списком:
list(map(float, <список из строк чисел>))
Вывести на экран значения множества s в порядке возрастания в одну строчку через пробел, используя команду:
print(*sorted(s))
P. S. О функции sorted мы еще будем говорить, а также об операторе *.
Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.
Sample Input:
-5.1 -3.0 7.6 10.3 -4.6 2.78
Sample Output:
-5.1 -4.6 -3.0 2.78 7.6 10.3
'''
    i = list(map(float, input().split()))
    s = set(i)
    print(*sorted(s))

def ex644():
    '''
     Вводится текст в одну строку, слова разделены пробелом.
     Необходимо подсчитать число уникальных слов (без учета регистра) в этом тексте.
     Результат (число уникальных слов) вывести на экран.
Sample Input:
Мама мыла раму а потом мыла кота и еще мыла пол
Sample Output:
9
    '''
    txt = set(input().lower().split())
    print(len(txt))

def ex645():
    '''Вводится строка, содержащая латинские символы, пробелы и цифры.
    Необходимо выделить из нее все неповторяющиеся цифры (символы от 0 до 9)
    и вывести на экран в одну строку через пробел их в порядке возрастания значений.
    Если цифры отсутствуют, то вывести слово НЕТ.
Sample Input:
Python 3.9.11 - best language!
Sample Output:
1 3 9
'''

    str = sorted(input())
    str = set(int(i) for i in str if i.isdigit())
    if len(str) == 0:
        print("НЕТ")
    else:
        print(*str)

def ex647():
    '''В аккаунте youtube Сергея прокомментировали очередное видео.
    Некоторые посетители оставляли несколько комментариев.
    Требуется по списку комментариев определить уникальное число комментаторов.
    Комментарии поступают на вход программы в формате:
имя 1: комментарий 1
имя 2: комментарий 2
...
имя N: комментарий N
Также полагается, что имена у разных комментаторов не совпадают. Вывести на экран общее число уникальных комментаторов.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.'''

    lst_in = ['EvgeniyK: спасибо большое!', 'LinaTroshka: лайк и подписка!', 'Sergey Karandeev: крутое видео!', 'Евгений Соснин: обожаю', 'EvgeniyK: это повтор?', 'Sergey Karandeev: нет, это новое видео']
    lst_in = [i.split(':') for i in lst_in]
    s = set(j[0] for j in lst_in)
    print(s)

def ex648():
    '''Пользователь с клавиатуры вводит названия городов, пока не введет букву q.
    Определить общее уникальное число городов, которые вводил пользователь.
    На экран вывести это число. Из коллекций при реализации программы использовать только множества.
Sample Input:
Уфа
Москва
Тверь
Екатеринбург
Томск
Уфа
Москва
q
Sample Output:
5
'''
    i = ''
    s = set()
    while i != 'q':
        i = input()
        if i != 'q':
            s.add(i)
    print(len(s))

def ex651():
    '''Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
    Необходимо выбрать и отобразить на экране уникальные числа,
    присутствующие и в первом и во втором списках одновременно.
    Результат выведите на экран в виде строки чисел,
    записанных по возрастанию через пробел, используя команду (здесь s - это множество):
print(*sorted(s))
P. S. О функции sorted мы еще будем говорить, а также об операторе *.
Пока просто запомните такую возможность сортировки и вывода произвольных коллекций на экран.
Sample Input:
8 11 12 15 -2
4 11 10 15 -5 1 -2
Sample Output:
-2 11 15
'''
    set1 = set(input().split())
    set2 = set(input().split())
    s = set1 & set2
    print(*sorted(s))

def ex652():
    '''Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
    Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом списке,
    но отсутствующие во втором. Результат выведите на экран в виде строки чисел, записанных по возрастанию через пробел.
Sample Input:
8 5 3 5 -3 1
1 2 3 4
Sample Output:
-3 5 8
    '''
    set1, set2 = set(input().split()), set(input().split())
    print(*sorted(set1 - set2))

def ex653():
    '''Вводятся два списка целых чисел каждый с новой строки (в строке наборы чисел через пробел).
    Необходимо выбрать и отобразить на экране уникальные числа, присутствующие в первом или втором списках,
    но отсутствующие одновременно в обоих. Результат выведите на экран в виде строки чисел,
    записанных по возрастанию через пробел.
Sample Input:
1 2 3 4 5
4 5 6 7 8
Sample Output:
1 2 3 6 7 8
'''
    set1, set2 = set(map(int, input().split())), set(map(int, input().split()))
    print(*sorted(set1 ^ set2))

def ex654():
    '''Вводятся два списка городов каждый с новой строки (в строке названия через пробел).
    Необходимо сравнить их между собой на равенство по уникальным (не повторяющимся) городам.
    Если списки содержат одни и те же уникальные города, то вывести на экран ДА, иначе - НЕТ.

Sample Input:
Москва Тверь Уфа Казань Уфа Москва
Уфа Тверь Москва Казань
Sample Output:
ДА
'''
    set1, set2 = set(input().split()), set(input().split())
    if set1 == set2:
        print("ДА")
    else:
        print("НЕТ")

def ex655():
    '''Вводится список оценок студента- его ответов у доски по предмету "Информатика" в виде чисел от 2 до 5
    в одну строку через пробел. Если студент имеет хотя бы одну двойку, то он не допускается до экзамена.
    Определить на основе введенного списка, допущен ли студент.
    Если допущен, то вывести слово ДОПУЩЕН, иначе - НЕ ДОПУЩЕН.
    При реализации задачи используйте множество для определения наличия двойки.

Sample Input:
3 4 4 5 2 3
Sample Output:
НЕ ДОПУЩЕН
'''
    s = set(map(int, input().split()))
    print('НЕ ДОПУЩЕН' if 2 in s else 'ДОПУЩЕН')

def ex656():
    '''
    Вводятся два списка городов каждый с новой строки (в строке названия через пробел),
    которые объехал Сергей в 1-й и 2-й годы своего путешествия по России. Требуется определить,
    включал ли его маршрут во 2-й год все города 1-го года путешествия? Если это так, то вывести ДА, иначе - НЕТ.
Sample Input:
Москва Казань Самара Москва
Москва Владимир Новгород Казань Самара Москва
Sample Output:
ДА
    '''
    set1, set2 = set(input().split()), set(input().split())
    print('ДА' if set1 & set2 == set1 else 'НЕТ')

def ex657():
    '''
    Вводится натуральное число, которое может быть определено простыми множителями 1, 2, 3, 5 и 7.
    Необходимо разложить введенное число на указанные простые множители и проверить,
    содержит ли оно множители 2, 3 и 5 (все указанные множители)? Если это так, то вывести ДА, иначе - НЕТ.
Sample Input:
210
Sample Output:
ДА
    '''
    i = int(input())
    m = 2
    sn = {2, 3, 5}
    s = set()
    while m <= 10:
        if i % m == 0:
            i = i / m
            s.add(m)
        m += 1
    print("ДА" if sn & s else "НЕТ")

def ex662():
    '''Вводится строка со списком оценок, например:

2 неудовлетворительно удовлетворительно хорошо отлично

Первая цифра - это числовое значение первой оценки. Остальные оценки имеют возрастающие на 1 числа.
С помощью генератора словарей необходимо сформировать словарь d,
где ключами будут выступать числа, а значениями - слова.
Например:
d = {2: 'неудовлетворительно', 3: 'удовлетворительно', 4: 'хорошо', 5: 'отлично'}
Вывести на экран значение сформированного словаря с ключом 4.
Sample Input:
1 ужасно неудовлетворительно удовлетворительно прилично отлично
Sample Output:
прилично
'''
    i = list(input().split())
    d = {item: value for item, value in enumerate(i[1:], start=int(i[0]))}
    print(d[4])

def ex663():
    '''На автомойку в течение квартала заезжали машины. Их гос. номера фиксировались в журнале, следующим образом (пример):

Е220СК
А120МВ
В101АА
Е220СК
А120МВ

На основе такого списка через генератор множеств сформировать список уникальных машин.
На экран вывести число уникальных машин.
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
А323ГД
Д456ВВ
Б001ББ
Д456ВВ
С111СС
Sample Output:
4
'''
    lst_in = ['А323ГД', 'Д456ВВ', 'Б001ББ', 'Д456ВВ', 'С111СС']
    print(len({x for x in lst_in}))

def ex664():
    '''Вводится текст в одну строчку со словами через пробел.
    С помощью генератора множеств сформировать множество из уникальных слов без учета регистра
    и длина которых не менее трех символов. Вывести на экран размер этого множества.
Sample Input:
Хижина изба машина и снова хижина машина
Sample Output:
4
'''
    # i = input().lower().split()
    # print(len({x for x in i if len(x) >= 3}))
    print(len({i for i in input().lower().split() if len(i) > 2}))

def ex665():
    ''' Вводится текст в одну строчку со словами через пробел.
    Используя генераторы множеств и словарей, сформировать словарь в формате:
{слово_1: количество_1, слово_2: количество_2, ..., слово_N: количество_N}
То есть, ключами выступают уникальные слова (без учета регистра), а значениями - число их встречаемости в тексте.
На экран вывести значение словаря для слова (союза) 'и'. Если такого ключа нет, то вывести 0.
Sample Input:
И что сказать и что сказать и нечего и точка
Sample Output:
4
'''
    i = input().lower().split()
    d = {x: i.count(x) for x in i}
    print(d['и'] if 'и' in d else 0)

def ex666():
    '''Вводится список книг книжного магазина в формате:
<автор 1>:<название 1>
...
<автор N>:<название N>
Авторы с названиями могут повторяться. Необходимо, используя генераторы, сформировать словарь с именем d вида:
{'автор 1': {'название 1', 'название 2', ..., 'название M'}, ..., 'автор K': {'название 1', 'название 2', ..., 'название S'}}
То есть, ключами выступают уникальные авторы, а значениями - множества с уникальными названиями книг соответствующего автора.
На экран ничего выводить не нужно, только сформировать словарь обязательно с именем d - он, далее будет проверяться в тестах!
P. S. Для считывания списка целиком в программе уже записаны начальные строчки.
Sample Input:
Пушкин: Сказака о рыбаке и рыбке
Есенин: Письмо к женщине
Тургенев: Муму
Пушкин: Евгений Онегин
Есенин: Русь
Sample Output:
True
'''
    lst = ['Пушкин: Сказака о рыбаке и рыбке', 'Есенин: Письмо к женщине', 'Тургенев: Муму',
         'Пушкин: Евгений Онегин', 'Есенин: Русь']
    lst = [i.split(':') for i in lst]
    d = {lst[i][0]: {lst[j][1] for j in range(len(lst)) if lst[j][0] == lst[i][0]} for i in range(len(lst))}
    print(d)

def main():
    #ex654()
    #ex655()
    #ex656()
    #ex657()
    #ex662()
    #ex663()
    #ex664()
    #ex665()
    ex666()
main()
