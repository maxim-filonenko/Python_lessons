### УСЛОВНЫЕ ОПЕРАТОРЫ ###
import math
### Оператор IF ###
### Example 1 ###
def state_if():
    x = -4
    if x < 0:
        x = -x
    print(f'x = -4, значит |x| = {x}')

    marks = [4, 5, 3, 3, 3, 4]
    if 2 in marks or 1 in marks:
        print("Студент будет отчислен!")
    else:
        print("Красавчик, учись дальше!!!")
    return 0
#state_if()

def ex3():
    '''Вводятся два целых положительных числа m и n в одну строку через пробел.
    Если число m делится нацело на число n,
    то вывести на экран частное от деления (результат деления) в виде целого числа.
    В противном случае вывести сообщение «m на n нацело не делится» (без кавычек)
    и вместо m и n подставить соответствующие числа, например: «13 на 2 нацело не делится».'''
    m, n = map(int, input("Введите два целых числа через пробел: ").split())
    res = m / n
    print(m % n)
    if m % n == 0:
        print(res)
    else:
        print(f'{m} на {n} нацело не делится.')
    return 0
#ex3()

def Pifogor():
    """ Вводятся три целых положительных числа в одну строку через пробел.
    Убедиться, что первые два числа - это катеты прямоугольного треугольника,
    а третье - его гипотенуза.
    (Подсказка: проверка делается по теореме Пифагора ).
    Если проверка проходит (истинна), то вывести на экран ДА, иначе - НЕТ."""

    a, b, c = map(int, input("Введите 3 целых числа через пробел: ").split())
    if pow(c, 2) == (pow(a, 2) + pow(b, 2)):
        print("ДА")
    else:
        print("НЕТ")
    return 0
#Pifogor()

def ex4():
    '''Вводится четырехзначное число. Проверить, что оно оканчивается на цифру 7.
    Вывести на экран ДА, если это так и НЕТ - в противном случае.'''
    num = input()
    if int(num[-1:]) == 7:
        print(int(num[-1:]))
    else:
        print("НЕТ")
    return 0

#ex4()

def envelope():
    '''Вводятся четыре целых числа a, b, c, d в одну строку через пробел.
    Определить, войдет ли в конверт с внутренними размерами a и b мм прямоугольная открытка с размерами с и d мм.
    Для размещения открытки в конверте необходим зазор в 1 мм с каждой стороны.
    Открытку можно поворачивать на 90 градусов. Вывести ДА, если входит и НЕТ - если не входит.'''
    a, b, c, d = map(int, input("Вводятся четыре целых числа a, b, c, d в одну строку через пробел:").split())
    env_s = a * b
    card_s = (c + 1) * (d + 1)
    if (a > c + 1 and b > d + 1) or (b > c + 1 and a > d + 1):
        print("ДА")
    else:
        print("НЕТ")
    #print(env_s > card_s)
    return 0
#envelope()

def lucky_num():
    num = input()
    luc = [int(num[0]), int(num[1]), int(num[2])]
    ky = [int(num[3]), int(num[4]), int(num[5])]
    if sum(luc) == sum(ky):
        print("ДА")
    else:
        print("НЕТ")

    return 0
#lucky_num()

def traffic_light():
    """Работа светофора для пешеходов запрограммирована следующим образом:
    в начале каждого часа в течение трех минут горит зеленый сигнал,
    затем в течение двух минут – красный, в течение трех минут – опять зеленый и т. д.
    Дано вещественное число t, означающее время в минутах, прошедшее с начала очередного часа.
    Определить, сигнал какого цвета горит для пешеходов в этот момент.
    На экран вывести сообщение (без кавычек) "green" - для зеленого и "red" - для красного."""
    min = 4
    if min % 5 <= 3:
        print('green')
    else:
        print('red')
    return 0
traffic_light()

def lists():
    num = int(input("Выбери курс: "))
    if num == 1:
        print('1. Введение в Python')
    elif num == 2:
        print('2. Строки и списки')
    elif num == 3:
        print('3. Условные операторы')
    elif num == 4:
        print('4. Циклы')
    elif num == 5:
        print('5. Словари, кортежи и множества')
    elif num == 6:
        print('6. Выход')
    return 0
#lists()

### Вложенные условия и множественный выбор ###

def week_days():
    day = int(input("Введите номер дня недели: "))
    if day == 1:
        print("понедельник")
    elif day == 2:
        print("вторник")
    elif day == 3:
        print("среда")
    elif day == 4:
        print("четверг")
    elif day == 5:
        print("пятница")
    elif day == 6:
        print("суббота")
    elif day == 7:
        print("воскресенье")
    else:
        print("Неверно введен номер дня недели, попробуйте еще раз...")
        week_days()
    return 0

#week_days()

def amount_days():
    '''Вводится порядковый номер месяца (1, 2, ..., 12). Вывести на экран количество дней в этом месяце.
Принять, что год не является високосным. Реализовать через условный оператор,
в котором следует использовать не более трех ветвей (блоков).

P.S. Число дней в месяцах не високосного года, начиная с января:
31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31'''

    m = int(input("Введите порядковый номер месяца: "))
    if m == 2:
        print("28")
    elif (m % 2 == 1 and m <=7) or (m % 2 == 0 and m > 7):
        print("31")
    else:
        print("30")
    return 0

#amount_days()

def after_next_day():
    '''Дата некоторого дня характеризуется двумя натуральными числами: m (порядковый номер месяца) и n (число).
    По введенным m и n (в одну строку через пробел) определить:

а) дату предыдущего дня (принять, что m и n не характеризуют 1 января);
б) дату следующего дня (принять, что m и n не характеризуют 31 декабря).

В задаче принять, что год не является високосным.
Вывести предыдущую дату и следующую дату (в формате: mm.dd, где m - число месяца; d - номер дня)
в одну строчку через пробел.

P.S. Число дней в месяцах не високосного года, начиная с января: 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31'''

    m, n = map(int, input("Введите месяц и день: ").split())
    td = n + 1
    yd = n - 1
    ym = m
    tm = m
    print(f'{str(m).rjust(2, "0")}.{str(n).rjust(2, "0")}')
    if n == 28 and m == 2:
        td = 1
        tm = m + 1
    elif n == 1 and m == 2:
        ym = 1
    elif n == 1 and m == 3:
        td = 28
    elif n == 1 and m == 8:
        yd = 31
        ym = m - 1
    elif n == 31 and (m % 2 == 1 and m <=7) or (m % 2 == 0 and m > 7):
        td = 1
        yd = n - 1
        tm = m + 1
    elif n == 30 and (m % 2 == 0 and m <=7) or (m % 2 == 1 and m > 7):
        td = 1
        yd = n - 1
        tm = m + 1
    elif n == 1 and (m % 2 == 0 and m <=7) or (m % 2 == 1 and m > 7):
        yd = 30
        ym = m - 1

    print(f'{str(ym).rjust(2, "0")}.{str(yd).rjust(2, "0")} {str(tm).rjust(2, "0")}.{str(td).rjust(2, "0")}')
    return 0
#after_next_day()

def day_of_week():
    ''' Вводится целое число k (1 <= k <= 365).
    Определить, каким днем недели (понедельник, вторник, среда, четверг, пятница, суббота или воскресенье)
    является k-й день не високосного года, в котором 1 января является понедельником.'''
    n = int(input("Введите номер дня недели: "))
    if n % 7 == 0:
        print("воскресенье")
    if n % 7 == 1:
        print("понедельник")
    if n % 7 == 2:
        print("вторник")
    if n % 7 == 3:
        print("среда")
    if n % 7 == 4:
        print("четверг")
    if n % 7 == 5:
        print("пятница")
    if n % 7 == 6:
        print("суббота")
    return 0
# day_of_week()
#
### ТЕРНАРНЫЙ УСЛОВНЫЙ ОПЕРАТОР ###
def tern_oper1():
    a = 2
    b = 7
    res = a if a > b else b
    print(res)
    return 0
#tern_oper1()

def notes():
    '''Вводятся три целых числа в диапазоне от 1 до 7 - номера нот, в одну строчку через пробел.
    Необходимо отобразить указанные ноты в виде строки через пробел,
    но перед нотами до и фа дополнительно ставить символ диеза '#'.
    Реализовать эту программу с использованием тернарного условного оператора
    (он может использоваться несколько раз).'''
    a, b, c = list(map(int, input().split()))
    m = ['до', 'ре', 'ми', 'фа', 'соль', 'ля', 'си']
    ares = "#" + m[a - 1] if a == 1 or a == 4 else m[a - 1]
    bres = "#" + m[b - 1] if b == 1 or b == 4 else m[b - 1]
    cres = "#" + m[c - 1] if c == 1 or c == 4 else m[c - 1]
    res = [ares, bres, cres]
    print(*res)
    return 0
notes()

